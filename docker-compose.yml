services:
  db:
    image: postgres:12
    restart: always
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-app}" ]
      interval: 10s
      retries: 5
      start_period: 30s
      timeout: 10s
    volumes:
      - app-db-data:/var/lib/postgresql/data/pgdata
    env_file:
      - .env
    environment:
      - PGDATA=/var/lib/postgresql/data/pgdata
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_DB=${POSTGRES_DB:-app}
    ports:
      - "5432:5432"
    secrets:
      - postgres_password

  adminer:
    image: adminer
    restart: always
    depends_on:
      - db
    environment:
      - ADMINER_DESIGN=pepa-linha-dark

  mailcatcher:
    image: schickling/mailcatcher
    ports:
      - "1080:1080"
      - "1025:1025"

  prestart:
    image: '${DOCKER_IMAGE_BACKEND:-backend}:${TAG:-latest}'
    build:
      context: ./backend
    depends_on:
      db:
        condition: service_healthy
        restart: true
    command: bash scripts/prestart.sh
    env_file:
      - .env
    environment:
      - DOMAIN=${DOMAIN:-localhost}
      - FRONTEND_HOST=${FRONTEND_HOST:-http://frontend:5173}
      - ENVIRONMENT=${ENVIRONMENT:-local}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-"http://localhost,http://localhost:5173"}
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin@example.com}
      - FIRST_SUPERUSER_PASSWORD_FILE=/run/secrets/first_superuser_password
      - SMTP_HOST=${SMTP_HOST:-localhost}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD_FILE=/run/secrets/smtp_password
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-info@example.com}
      - POSTGRES_SERVER=db
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - SENTRY_DSN=${SENTRY_DSN:-}
    secrets:
      - postgres_password
      - secret_key
      - first_superuser_password
      - smtp_password

  backend:
    image: '${DOCKER_IMAGE_BACKEND:-backend}:${TAG:-latest}'
    restart: always
    depends_on:
      db:
        condition: service_healthy
        restart: true
      prestart:
        condition: service_completed_successfully
    secrets:
      - postgres_password
      - secret_key
      - first_superuser_password
      - smtp_password
    env_file:
      - .env
    environment:
      - PROJECT_NAME=${PROJECT_NAME:-"Full Stack FastAPI Project"}
      - DOMAIN=${DOMAIN:-localhost}
      - FRONTEND_HOST=${FRONTEND_HOST:-http://frontend:5173}
      - ENVIRONMENT=${ENVIRONMENT:-local}
      - BACKEND_CORS_ORIGINS=${BACKEND_CORS_ORIGINS:-"http://localhost,http://localhost:5173"}
      - SECRET_KEY_FILE=/run/secrets/secret_key
      - FIRST_SUPERUSER=${FIRST_SUPERUSER:-admin@example.com}
      - FIRST_SUPERUSER_PASSWORD_FILE=/run/secrets/first_superuser_password
      - SMTP_HOST=${SMTP_HOST:-localhost}
      - SMTP_USER=${SMTP_USER:-}
      - SMTP_PASSWORD_FILE=/run/secrets/smtp_password
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL:-info@example.com}
      - POSTGRES_SERVER=${POSTGRES_SERVER:-db}
      - POSTGRES_PORT=${POSTGRES_PORT:-5432}
      - POSTGRES_DB=${POSTGRES_DB:-app}
      - POSTGRES_USER=${POSTGRES_USER:-postgres}
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres_password
      - SENTRY_DSN=${SENTRY_DSN:-}

    healthcheck:
      test: [ "CMD", "curl", "-f", "http://localhost:8000/api/v1/utils/health-check/" ]
      interval: 10s
      timeout: 5s
      retries: 5

    build:
      context: ./backend

    command: "bash scripts/init-db.sh"

  frontend:
    restart: always
    ports:
      - "5173:80"
    build:
      context: ./frontend
      args:
        - VITE_API_URL=http://${DOMAIN:-localhost}
        - NODE_ENV=production

  nginx:
    image: nginx:latest
    restart: always
    ports:
      - 80:80
    volumes:
      - ./nginx.conf:/etc/nginx/conf.d/default.conf
      - /data:/data
    depends_on:
      - backend

secrets:
  postgres_password:
    file: /home/vagrant/secrets/postgres_password
  secret_key:
    file: /home/vagrant/secrets/secret_key
  first_superuser_password:
    file: /home/vagrant/secrets/first_superuser_password
  smtp_password:
    file: /home/vagrant/secrets/smtp_password

volumes:
  app-db-data:
    driver: local
    driver_opts:
      type: none
      o: bind
      device: /data

# параметр для композа на привязку ядер - cpuset
# memlimit - жесткое ограничение
# memreservation - мягкое ограничение
